datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    refresh_token_expires_in Int? // GitHub specific
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    oauth_token              String? // Twitter specific
    oauth_token_secret       String? // Twitter specific
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    created_at    DateTime      @default(now())
    updated_at    DateTime      @default(now()) @updatedAt
    Reservation   Reservation[]
    Review        Review[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Restaurant {
    id           String   @id @default(cuid())
    name         String
    about        String
    phone        String
    website      String
    total_tables Int
    opening_hour String
    closing_hour String
    cuisine      String
    created_at   DateTime @default(now())
    updated_at   DateTime @default(now()) @updatedAt

    Address     Address?
    Reservation Reservation[]
    Review      Review[]
}

model Address {
    id           String   @id @default(cuid())
    address_line String
    zipcode      String
    city         String
    state        String
    country      String
    created_at   DateTime @default(now())
    updated_at   DateTime @default(now()) @updatedAt

    restaurant    Restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
    restaurant_id String     @unique
}

model Review {
    id         String   @id @default(cuid())
    rating     Int
    comment    String
    created_at DateTime @default(now())
    updated_at DateTime @default(now()) @updatedAt

    reservation    Reservation @relation(fields: [reservation_id], references: [id], onDelete: Cascade)
    reservation_id String      @unique

    restaurant    Restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
    restaurant_id String

    user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
    user_id String
}

model Reservation {
    id         String   @id @default(cuid())
    date       DateTime
    canceled   Boolean  @default(false)
    reviewed   Boolean  @default(false)
    created_at DateTime @default(now())
    updated_at DateTime @default(now()) @updatedAt

    restaurant    Restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
    restaurant_id String

    user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
    user_id String
    Review  Review?
}

model Hour {
    id   String @id @default(cuid())
    hour String
}
