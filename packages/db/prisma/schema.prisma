datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    refresh_token_expires_in Int? // GitHub specific
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    oauth_token              String? // Twitter specific
    oauth_token_secret       String? // Twitter specific
    user                     User    @relation(fields: [userId], references: [id])

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id])

    @@index([userId])
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    created_at    DateTime      @default(now())
    updated_at    DateTime      @default(now()) @updatedAt
    Reservation   Reservation[]
    Rate          Rate[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Restaurant {
    id           String   @id @default(cuid())
    name         String   @db.TinyText
    about        String   @db.VarChar(1000)
    phone        String   @db.VarChar(20)
    website      String   @db.TinyText
    total_tables Int      @db.UnsignedTinyInt
    opening_hour String   @db.TinyText
    closing_hour String   @db.TinyText
    cuisine      String   @db.TinyText
    created_at   DateTime @default(now())
    updated_at   DateTime @default(now()) @updatedAt

    Address     Address[]
    Reservation Reservation[]
    Rate        Rate[]
}

model Address {
    id           String   @id @default(cuid())
    address_line String   @db.TinyText
    zipcode      String   @db.VarChar(10)
    city         String   @db.TinyText
    state        String   @db.TinyText
    country      String   @db.TinyText
    created_at   DateTime @default(now())
    updated_at   DateTime @default(now()) @updatedAt

    restaurant    Restaurant @relation(fields: [restaurant_id], references: [id])
    restaurant_id String

    @@index([restaurant_id])
}

model Rate {
    id         String   @id @default(cuid())
    rating     Int      @db.UnsignedTinyInt
    comment    String   @db.VarChar(1000)
    created_at DateTime @default(now())
    updated_at DateTime @default(now()) @updatedAt

    reservation    Reservation @relation(fields: [reservation_id], references: [id])
    reservation_id String

    restaurant    Restaurant @relation(fields: [restaurant_id], references: [id])
    restaurant_id String

    user    User   @relation(fields: [user_id], references: [id])
    user_id String

    @@index([reservation_id])
    @@index([restaurant_id])
    @@index([user_id])
}

model Reservation {
    id         String   @id @default(cuid())
    date       DateTime
    canceled   Boolean  @default(false)
    rated      Boolean  @default(false)
    created_at DateTime @default(now())
    updated_at DateTime @default(now()) @updatedAt

    restaurant    Restaurant @relation(fields: [restaurant_id], references: [id])
    restaurant_id String

    user    User   @relation(fields: [user_id], references: [id])
    user_id String
    Rate    Rate[]

    @@index([restaurant_id])
    @@index([user_id])
}
