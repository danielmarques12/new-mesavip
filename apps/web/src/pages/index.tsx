import { Restaurant, prisma } from '@mesavip/db'
import type { GetServerSideProps, NextPage } from 'next'
import { signIn, signOut } from 'next-auth/react'
import Head from 'next/head'
import { trpc } from 'utils/trpc'

export const getServerSideProps: GetServerSideProps = async () => {
  const cuisines = await prisma.$queryRaw<
    Array<Restaurant & { total: string }>
  >`
    SELECT DISTINCT
    cuisine,
    (
      SELECT COUNT(r2.id)
      FROM Restaurant r2
      WHERE r2.cuisine = r.cuisine
    ) AS total
    FROM Restaurant r
    GROUP BY id
  `

  // cuisines.forEach(({ total }) => console.log(total))

  return {
    props: {},
  }
}

const Home: NextPage = () => {
  const postQuery = trpc.post.all.useQuery()

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name='description' content='Generated by create-t3-app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <main className='flex h-screen flex-col items-center bg-gradient-to-b from-[#2e026d] to-[#15162c] text-white'>
        <div className='container flex flex-col items-center justify-center gap-12 px-4 py-8'>
          <h1 className='text-5xl font-extrabold tracking-tight sm:text-[5rem]'>
            Create <span className='text-[hsl(280,100%,70%)]'>T3</span> Turbo
          </h1>
          <AuthShowcase />

          <div className='flex h-[60vh] justify-center px-4 text-2xl'>
            {postQuery.data ? (
              <div className='flex flex-col gap-4'>{postQuery.data}</div>
            ) : (
              <p>yeah</p>
            )}
          </div>
        </div>
      </main>
    </>
  )
}

export default Home

const AuthShowcase: React.FC = () => {
  const { data: session } = trpc.auth.getSession.useQuery()

  const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: !!session?.user },
  )

  return (
    <div className='flex flex-col items-center justify-center gap-4'>
      {session?.user && (
        <p className='text-center text-2xl text-white'>
          {session && <span>Logged in as {session?.user?.name}</span>}
          {secretMessage && <span> - {secretMessage}</span>}
        </p>
      )}
      <button
        className='rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20'
        onClick={session ? () => signOut() : () => signIn()}
      >
        {session ? 'Sign out' : 'Sign in'}
      </button>
    </div>
  )
}
